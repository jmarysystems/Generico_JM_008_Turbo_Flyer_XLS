/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package turbo_flyer;

import br.com.jmary.utilidades.Arquivo_Ou_Pasta;
import br.com.jmary.utilidades.JOPM;
import java.awt.Color;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import home_controle_menus_norte.imagens.Imagens_Menu_Norte;
import java.awt.Component;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import login_do_sistema.Login;

/**
 *
 * @author NewUser
 */
public class Tabela extends javax.swing.JPanel {
    
    private ListSelectionModel lsmPesquisa;
    public DefaultTableModel   tmPesquisa;
                    
    /**
     * Creates new form Email_Mensagens_Por_Contato
     * @param mensagem2
     */
    public Tabela(String mensagem2) {
        initComponents();

        tabelaInicio();
        
        //setar_na_tabela(mensagem2);
    }
    
    public void setar_linha_na_tabela( Object[] rowData ){
        try{      
            
            tmPesquisa.addRow( rowData );                                 
        } catch( Exception e ){}
    }
                        
    private void setar_na_tabela(String mensagem3){
        try{      
            
            String nome = "";
            String email = "";
            
//////////////////////////////////////////////////////////////////////////////////////////////////////////                            
            if( !mensagem3.equals("") ){
               
                try{ 
                    String dois[] = mensagem3.split("-");
                    
                    nome  = dois[0];
                    email = dois[1];
                }catch( Exception e ){}    
                
            }                    
            
/////////////////////////////////////////////////////////////////////////////////////////////////////////// 
        
            Linha_da_Tabela Linha_da_Tabela = new Linha_da_Tabela();
            Linha_da_Tabela.imageIcon = new ImageIcon( Imagens_Menu_Norte.class.getResource("lixo2.png") );
            Linha_da_Tabela.nome = nome;
            Linha_da_Tabela.email = email;
                        
            List<Linha_da_Tabela> Lista_Generica = new ArrayList<Linha_da_Tabela>();
            Lista_Generica.add(Linha_da_Tabela);

            Object[] rowData = new Object[] { Linha_da_Tabela.imageIcon, nome, email };  
            tmPesquisa.addRow( rowData );  
            tmPesquisa.addRow( rowData ); 
            tmPesquisa.addRow( rowData ); 
            tmPesquisa.addRow( rowData ); 
            tmPesquisa.addRow( rowData ); 
            tmPesquisa.addRow( rowData ); 
                                
        } catch( Exception e ){}
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tbPesquisa = new javax.swing.JTable();

        jScrollPane2.setBorder(null);

        jScrollPane2.setViewportView(tbPesquisa);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    DefaultTableCellRenderer coluna0 = new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){ 
            
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);  
            
            JLabel label = (JLabel)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if (value instanceof ImageIcon) { 

                Rectangle cellRect = table.getCellRect(row, column, false);                
                
                Image image;
                ImageIcon imageIcon;
                try {  
                    imageIcon = (ImageIcon)value;
                    image = imageIcon.getImage();
                    
                    double x = cellRect.getWidth();
                    
                    Icon icon = 
                            new ImageIcon(image.getScaledInstance(
                            (int) x, (int) cellRect.getHeight(), 
                            Image.SCALE_DEFAULT) );
                                                                        
                    label.setIcon( icon );
                    
                    setText(" ");
                    
                    setToolTipText( "Excluir Linha" );

                }catch(Exception ex){}
                
            } else if (value instanceof String) {
                
                setText((String) value);  
            }  
            
            if (isSelected) {
                
                int c = table.getSelectedColumn();
                
                if( c == 0 ){
                                        
                    new Thread() {   @Override public void run() { try {   
                    
                        String nome = (String) tbPesquisa.getValueAt(tbPesquisa.getSelectedRow(), 1);
                        String email = (String) tbPesquisa.getValueAt(tbPesquisa.getSelectedRow(), 2);
                                                                        
                        tmPesquisa.removeRow(tbPesquisa.getSelectedRow());
                        tbPesquisa.repaint();
                        tbPesquisa.validate();
                        
                        remover_properties(nome, email);
                    } catch( Exception e ){  } } }.start();
                }
            }
            
            return this;  
        } 
    };
    
    public void remover_properties( String nome, String email){
        /*new Thread() {   @Override public void run() {*/ try { 
            
            String email_Usuario_Logado = ""; 
            try{ email_Usuario_Logado = Login.Usuario_Logado.getEmailRecuperacao(); }catch( Exception e ){}
            
            if( !email_Usuario_Logado.equals("") ){
                
                String arquivo_properties = email_Usuario_Logado.trim().toUpperCase().replace("@", "_");
                String email_Logado = arquivo_properties.trim().toUpperCase().replace(".", "_");
                String arquivoASerCriado = System.getProperty("user.dir") + "\\00_Externo\\CONTATOS\\" + email_Logado + ".properties";
                
                Properties properties = new Properties();                                   
                FileInputStream in = null;
                try{ 
                    in = new FileInputStream( arquivoASerCriado ); 
                    properties.loadFromXML(in);
                    in.close();
                                        
                    Arquivo_Ou_Pasta.deletar( new File( arquivoASerCriado ) );  
                    
                    Properties propertiesX = new Properties();
                    for(Enumeration elms = properties.propertyNames(); elms.hasMoreElements();){
                        
                        String prop = (String)elms.nextElement();
                        String value = properties.getProperty(prop);
                        
                        System.out.println(nome + " - " + email);
                        System.out.println(prop + " - " + value);
                        
                        if( !value.trim().toUpperCase().equals(email.trim().toUpperCase()) ){
                            
                            propertiesX.put(prop, value);
                        }
                    }
                    
                    FileOutputStream out = new FileOutputStream( arquivoASerCriado );
                    propertiesX.storeToXML(out, "updated", "UTF-8"); 
                    out.flush();
                    out.close();
                    
                } catch( Exception e ){ }            
            }                            
        } catch( Exception e ){  } //} }.start();   
    }
    
    private void tabelaInicio(){
        /*new Thread() {   @Override public void run() {*/ try { //Thread.sleep( 1 ); 
        
            tmPesquisa = colunas_da_Tabela_1; 
            
            lsmPesquisa = tbPesquisa.getSelectionModel();
            setar_Coluna_da_Tabela(1); 
            setar_DefaultTableModel_tbPreferedSize(1); 
        
            TableColumn TColuna = tbPesquisa.getColumnModel().getColumn( 0 );
            TColuna.setCellRenderer( coluna0 ); 
        
            tbPesquisa.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            
            tbPesquisa.setAutoCreateRowSorter(true);

            tabelaModoDeSelecao( "Multiple Interval Selection", false, false, false );                        
            
            ////////////////////////////////////////////////////////////////////
            lsmPesquisa.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if ( !e.getValueIsAdjusting() ){
                        tbPesquisaLinhaSelecionada();
                    }
                }
                public void mouseClicked(MouseEvent e) {
                    
                }
            });
            ////////////////////////////////////////////////////////////////////
                                    
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "tabelaInicio(), \n"
                + e.getMessage() + "\n", this.getClass().getSimpleName() ); } //} }.start();              
    }
    
    public void tabelaModoDeSelecao( String command, boolean linhaCheck, boolean colunaCheck, boolean selecionar_celula ) {
        
        if ("Row Selection".equals(command)) {
            
            tbPesquisa.setRowSelectionAllowed(linhaCheck);
            //In MIS mode, column selection allowed must be the
            //opposite of row selection allowed.
            if (!selecionar_celula) {
                tbPesquisa.setColumnSelectionAllowed(!linhaCheck);
            }
            
        } else if ("Column Selection".equals(command)) {
            
            tbPesquisa.setColumnSelectionAllowed(colunaCheck);
            //In MIS mode, row selection allowed must be the
            //opposite of column selection allowed.
            if (!selecionar_celula) {
                tbPesquisa.setRowSelectionAllowed(!colunaCheck);
            }

        } else if ("Cell Selection".equals(command)) {
            
            tbPesquisa.setCellSelectionEnabled(selecionar_celula);
            
        } else if ("Multiple Interval Selection".equals(command)) {
            
            tbPesquisa.setSelectionMode(
                    ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            //If cell selection is on, turn it off.
            if (selecionar_celula) {
                selecionar_celula = false;
                tbPesquisa.setCellSelectionEnabled(false);
            }
            //And don't let it be turned back on.
            selecionar_celula = false;
            
        } else if ("Single Interval Selection".equals(command)) {
            
            tbPesquisa.setSelectionMode(
                    ListSelectionModel.SINGLE_INTERVAL_SELECTION);
            //Cell selection is ok in this mode.
            selecionar_celula = true;
            
        } else if ("Single Selection".equals(command)) { 
            
            tbPesquisa.setSelectionMode(
                    ListSelectionModel.SINGLE_SELECTION);
            //Cell selection is ok in this mode.
            selecionar_celula = true;                       
        }
    }
                            
    String controltbPesquisaLinhaSelecionada = "";
    public void tbPesquisaLinhaSelecionada() { 
        try{
            
            if ( tbPesquisa.getSelectedRow() != -1){               

                /*lbEditar        .setEnabled(true);
                lbDesativar     .setEnabled(true);
                lbVisualizar    .setEnabled(true);
                lb_Exportar_Exel.setEnabled(true);
                lb_Impressora.setEnabled(true);*/

            } 
            else{
                    
                /*lbEditar     .setEnabled(false);
                lbDesativar .setEnabled(false);
                lbVisualizar.setEnabled(false);
                lb_Exportar_Exel.setEnabled(false);
                lb_Impressora.setEnabled(false);*/
            }
        } catch( Exception e ) {}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable tbPesquisa;
    // End of variables declaration//GEN-END:variables

    public DefaultTableModel colunas_da_Tabela_1 = new DefaultTableModel( null, new String[]{ "EXCLUIR", "NOME", "EMAIL"
            /*
        "id_planilha_google",
        "id_0_formulario",
        "id_1_formulario_email_de",
        "id_2_formulario_email_para",
        "id_3_formulario_mensagem",
        "id_4_formulario_imagem",
        "id_planilha_google_status_de",
        "id_1_formulario_status_de",
        "id_1_formulario_status_email_de"
       */
    } );  
    
    public class Linha_da_Tabela{
        
        public ImageIcon imageIcon;
        public String nome;
        public String email;        
    }
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    public void setar_Coluna_da_Tabela(int opcao){  
        try{
            
            switch(opcao){
                
                case 1:
                    while ( tmPesquisa.getRowCount() > 0){ tmPesquisa.removeRow(0); }                     
                    tmPesquisa = colunas_da_Tabela_1;                    
                    tbPesquisa.setModel(tmPesquisa);
                break;    
                
            }            
        } catch( Exception e ){ e.printStackTrace(); }
    }
    
    public void setar_DefaultTableModel_tbPreferedSize(int opcao){ 
        try{
            
            switch(opcao){
                
                case 1:
                    DefaultTableCellRenderer rendererCentro = new DefaultTableCellRenderer();
                    rendererCentro.setHorizontalAlignment(SwingConstants.CENTER);
                    
                    DefaultTableCellRenderer rendererDireita = new DefaultTableCellRenderer();
                    rendererDireita.setHorizontalAlignment(SwingConstants.RIGHT);
                    
                    DefaultTableCellRenderer rendererEsquerda = new DefaultTableCellRenderer();
                    rendererEsquerda.setHorizontalAlignment(SwingConstants.LEFT);
                    
                    int count = 0;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(30);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererCentro );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(150);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
            
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(380);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    /*
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    
                    tbPesquisa.getColumnModel().getColumn(count).setPreferredWidth(200);
                    tbPesquisa.getColumnModel().getColumn(count).setResizable(true);
                    tbPesquisa.getColumnModel().getColumn(count).setCellRenderer( rendererEsquerda );
                    count++;
                    */
                    
                    tbPesquisa.setRowHeight(30);
                    tbPesquisa.setSelectionBackground(Color.YELLOW);
                    tbPesquisa.setSelectionForeground(Color.BLUE);

                    tbPesquisa.getTableHeader().setReorderingAllowed(true);
                    //tbPesquisa.getTableHeader().setResizingAllowed(true);            
                    tbPesquisa.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
                break;    
                
            }            
        } catch( Exception e ){ e.printStackTrace(); }
    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
    
}